{
  "openapi": "3.0.0",
  "info": {
    "title": "Book Management API ",
    "description": "API documentation for the book store service developed by Angele",
    "version": "1.0.0",
    "contact": {
      "email": "asifiwemarie2006@gmail.com",
      "name": "Angele Marie",
      "url": "https://github.com/AngeleMarie"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5600/api/v1",
      "description": "API Base URL"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management"
    },
    {
      "name": "Books",
      "description": "Book management"
    },
    {
      "name": "Transactions",
      "description": "Transactions management"
    },
    {
      "name": "Admin",
      "description": "Admin management and statistics"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Create a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
    "post": {
      "tags": ["Auth"],
      "summary": "Refresh user access token",
      "description": "This endpoint allows users to refresh their access token using a valid refresh token stored in cookies.",
      "responses": {
        "200": {
          "description": "Access token refreshed successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "The new access token",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "No refresh token provided",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "No refresh token provided"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Invalid refresh token",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid refresh token"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Failed to refresh token",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Failed to refresh token"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/auth/resend-activation-code": {
    "post": {
      "tags": ["Auth"],
      "summary": "Resend activation code",
      "description": "Resends an activation code to the user's email with rate limiting. Maximum 3 attempts allowed within 10 minutes, with a 1-minute cooldown between resends.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "user@example.com"
                }
              },
              "required": ["email"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Activation code resent successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Activation code resent successfully."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or cooldown/resend limit exceeded",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Please wait 60 seconds before requesting another code."
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User not found or not pending",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "User not found or already active."
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      }
    }
  },
    "/auth/activate-account": {
      "post": {
        "tags": ["Auth"],
        "summary": "Activate user account",
        "description": "Activate a newly registered user account using email and activation code",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "code": {
                    "type": "string",
                    "example": "657123"
                  }
                },
                "required": ["email", "code"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account activated successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid activation code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login to the system",
        "description": "Authenticate a user and get a token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request password reset",
        "description": "Request a password reset code via email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset code sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset code sent to your email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Auth"],
        "summary": "Logout user",
        "description": "Logs out the authenticated user by blacklisting their JWT token in Redis.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No valid token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "Reset user password using the code received via email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "resetCode": {
                    "type": "string",
                    "example": "123456"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "example": "newPassword123"
                  }
                },
                "required": ["email", "resetCode", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password reset successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid reset code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/users/change-details": {
      "put": {
        "tags": ["Users"],
        "summary": "Update user details",
        "description": "Update the authenticated user's profile information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John",
                    "required": true
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe",
                    "required": true
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Main St"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "balance": {
                    "type": "float",
                    "example": "234"
                  }
                },
                "required": ["firstName", "lastName"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/upload-profile-image/{id}": {
      "post": {
        "tags": ["Users"],
        "summary": "Upload profile image",
        "description": "Upload a profile image for a user (user can only upload their own image unless admin)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profileImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile image file"
                  }
                },
                "required": ["profileImage"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile image uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile image updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing image file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to modify this profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/remove-profile-image/{id}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Remove profile image",
        "description": "Remove the profile image of a user (user can only remove their own image unless admin)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile image removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile image removed successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No profile image exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to modify this profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user profile",
        "description": "Get the profile of the currently authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/statistics": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get system statistics",
        "description": "Get statistics about users, books, and admin balance (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer",
                          "example": 150
                        },
                        "adminBalance": {
                          "type": "number",
                          "format": "float",
                          "example": 5280.75
                        },
                        "totalBooks": {
                          "type": "integer",
                          "example": 325
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/clients": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get all clients",
        "description": "Get a list of all clients/users (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 5
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/search": {
      "get": {
        "tags": ["Admin"],
        "summary": "Search users by name",
        "description": "Search for users by their name (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name to search for (partial match)"
          }
        ],
        "responses": {
          "200": {
            "description": "Users matching the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/get-all": {
      "get": {
        "tags": ["Books"],
        "summary": "Get all books",
        "description": "Retrieve a paginated, sorted, and optionally filtered list of all books.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number (default is 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "bookName",
            "schema": {
              "type": "string"
            },
            "description": "Filter books by partial match on book name"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": ["bookName", "author", "unitPrice", "publishingDate"],
              "default": "publishingDate"
            },
            "description": "Sort by a field"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order: ascending or descending"
          }
        ],
        "responses": {
          "200": {
            "description": "List of books fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 5
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": 1
                    },
                    "books": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Book"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/books/add": {
      "post": {
        "tags": ["Books"],
        "summary": "Create a new book",
        "description": "Add a new book (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "bookName",
                  "description",
                  "quantityInStock",
                  "unitPrice",
                  "publishingDate",
                  "bookCover"
                ],
                "properties": {
                  "bookName": {
                    "type": "string",
                    "example": "Clean Code"
                  },
                  "description": {
                    "type": "string",
                    "example": "A handbook of agile software craftsmanship."
                  },
                  "quantityInStock": {
                    "type": "integer",
                    "example": 10
                  },
                  "unitPrice": {
                    "type": "number",
                    "format": "float",
                    "example": 29.99
                  },
                  "publishingDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2023-05-15"
                  },
                  "status": {
                    "type": "string",
                    "example": "In Transit"
                  },
                  "bookCover": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file for the book cover"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Book added successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Book"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/books/get/{id}": {
      "get": {
        "tags": ["Books"],
        "summary": "Get book by ID",
        "description": "Retrieve details of a specific book using its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the book"
          }
        ],
        "responses": {
          "200": {
            "description": "Book found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "book": {
                      "$ref": "#/components/schemas/Book"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/update/{id}": {
      "put": {
        "tags": ["Books"],
        "summary": "Update book",
        "description": "Update book details including cover image (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookName": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "quantityInStock": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "unitPrice": {
                    "type": "number",
                    "format": "float"
                  },
                  "publishingDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["Arrived", "In Transit"]
                  },
                  "bookCover": {
                    "type": "string",
                    "format": "binary",
                    "description": "Cover image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Book updated successfully"
                    },
                    "book": {
                      "$ref": "#/components/schemas/Book"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/books/delete/{id}": {
      "delete": {
        "tags": ["Books"],
        "summary": "Delete book",
        "description": "Delete a book (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Book deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/buy/{bookId}": {
      "post": {
        "summary": "Purchase a book",
        "tags": ["Transactions"],
        "description": "Allows an authenticated user to purchase a specific book by ID. The book must be in stock.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to purchase"
          }
        ],
        "responses": {
       "200": {
  "description": "Success",
  "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      }
    }
  }
},
          "400": {
            "description": "Bad request or insufficient stock",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not enough stock available."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
  "/transactions/my-transactions": {
    "get": {
      "tags": ["Transactions"],
      "summary": "Get transactions for the currently authenticated user",
      "security": [{ "bearerAuth": [] }],
      "responses": {
     "200": {
  "description": "Success",
  "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      }
    }
  }
},
        "400": {
          "description": "Bad request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized"
        },
        "500": {
          "description": "Internal server error"
        }
      }
    }
  }
},

  "components": {
    "schemas": {
      "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "txn_123456"
        },
        "userId": {
          "type": "string",
          "example": "user_abc"
        },
        "adminId": {
          "type": "string",
          "example": "admin_xyz"
        },
        "bookId": {
          "type": "string",
          "example": "book_def"
        },
        "amount": {
          "type": "number",
          "example": 19.99
        },
        "transactionType": {
          "type": "string",
          "example": "purchase"
        },
        "status": {
          "type": "string",
          "example": "completed"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2025-05-02T12:34:56.000Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2025-05-02T13:00:00.000Z"
        }
      }
    },
      "UserRegistration": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, City, Country"
          }
        },
        "required": ["firstName", "lastName", "email", "password"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John "
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, City, Country"
          },
          "profileImage": {
            "type": "string",
            "example": "/uploads/profiles/user-123.jpg"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "firstName": {
            "type": "string",
            "example": "John Doe"
          },
          "lastName": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1234567890"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, City, Country"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          },
          "profileImage": {
            "type": "string",
            "example": "/uploads/profiles/user-123.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-23T18:25:43.511Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-23T18:25:43.511Z"
          }
        }
      },
      "BookCreate": {
        "type": "object",
        "properties": {
          "bookName": {
            "type": "string",
            "example": "The Great Gatsby"
          },
          "description": {
            "type": "string",
            "example": "Set in the Jazz Age on Long Island, the novel follows Nick Carraway's encounters with Jay Gatsby..."
          },

          "publishingDate": {
            "type": "string",
            "format": "date",
            "example": "1925-04-10"
          },
          "bookCover": {
            "type": "string",
            "format": "binary",
            "example": "/uploads/covers/book-123.jpg"
          },
          "status": {
            "type": "string",
            "enum": ["Arrived", "In Transit"],
            "example": "In Transit"
          },
          "quantityInStock": {
            "type": "integer",
            "example": 5
          },
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 12.99
          }
        },
        "required": [
          "bookName",
          "status",
          "unitPrice",
          "publishingDate",
          "quantityInStock"
        ]
      },
      "BookUpdate": {
        "type": "object",
        "properties": {
          "bookName": {
            "type": "string",
            "example": "The Great Gatsby"
          },
          "description": {
            "type": "string",
            "example": "Updated description about the novel."
          },
          "publishingDate": {
            "type": "string",
            "format": "date",
            "example": "1925-04-10"
          },
          "status": {
            "type": "string",
            "enum": ["Arrived", "In Transit"],
            "example": "Arrived"
          },
          "quantityInStock": {
            "type": "integer",
            "example": 10
          },
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 15.49
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "bookName": {
            "type": "string",
            "example": "The Great Gatsby"
          },
          "description": {
            "type": "string",
            "example": "Set in the Jazz Age on Long Island, near New York City, the novel depicts first-person narrator Nick Carraway's interactions with mysterious millionaire Jay Gatsby..."
          },
          "bookCover": {
            "type": "string",
            "example": "/uploads/covers/book-123.jpg"
          },
          "status": {
            "type": "boolean",
            "example": true
          },
          "quantityInStock": {
            "type": "integer",
            "example": 5
          },
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 12.99
          },
          "publishingDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-23T18:25:43.511Z"
          }
        }
        
      },
   
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Error message"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
